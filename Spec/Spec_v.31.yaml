 workflow:
    - location: ../data/

    child_read_1 : 
        type : SequenceReadArchivePaired
        name-prefix: "CH_R1"

    child_read_2 : 
        type : SequenceReadArchivePaired
        name-prefix: "CH_R2"
        
    parent_read_1 : 
        type : SequenceReadArchivePaired
        name-prefix: "PR_R1"  

    parent_read_2 : 
        type : SequenceReadArchivePaired
        name-prefix: "PR_R2"  

    reference_29:
        type: RefGenome
        name: PlasmoDB-29_Pfalciparum3D7_Genome

    gff:
        type: GenFeatureFormat
        name: PlasmoDB-29_Pfalciparum3D7

    blacklist: file:://path/to/CentromereTelomereRegions.bed

    steps:
        qc:
            mrthid: fastqc
            inputs:
                fastq: child_read_1 + child_read_2 + parent_read_1 + parent_read_2
                outdir: "."
            outputs:
                zippedFile:
                report:
        
        process:
            repeat:
                for: 
                    iter1: [ child_read_1, child_read_2]
                    iter2: [ parent_read_1, parent_read_2 ]
                mapto: [ read1, read2 ]
                do:
                    scatter:
                        use: [ read_1, read_2 ]
                        method: dotproduct
                        provide: [ one, two ]
                    
                        #The step name has to be unique in scope thus a function/class/method is specified.
                        #If not specified, then step name is used as class name
                        
                        geno-align:
                            method: align 
                            inputs:
                                #implicit input one and two by scatter
                                #Synthesizing outputfile name can be encapsulated as convention in the "align" implementation 
                                # align implementation take RefGenome as input
                                reference: referrence_29
                            outputs:
                                aligned-file:
        
                        # convert to bam
                        convert:
                            method: samtools-view
                            inputs:
                                input: geno-align/aligned-file
                                output-basename: one.basename #<- The method adds ".bam"
                                #Everyhting else the method class can synthesize
                            outputs:
                                output:
        
                        # sort and compress
                        sort:
                            method: samtools-sort
                            inputs:
                                input: convert/output
                                output-basename: one.basename
                            outputs:
                                sorted:
        
                        # index bam    
                        index:
                            method: samtools-index
                            inputs:
                                input: sort/sorted
                            outputs:
                                index:
        
                        # Remove duplicate reads
                        dedup:
                            method: picar-markduplicates
                            inputs:
                                inputFileName_markDups: sort/sorted
                                outputFileName_markDups: one.basename
                                metricsFile: one.basename
                            outputs:
                                markDups_output:
                                markDups_metrics:
        
                        # index duplicates
                        index-dedup:
                            method: samtools-index
                            inoputs:
                                input: dedup/markDups_output
                            outputs:
                                index:
        
                        insert-metrics:
                            method: picard-CollectInsertSizeMetrics
                            inputs:
                                input: dedup/markDups_output
                                output: one.basename
                                histogram_file: one.basename
                            outputs:
                                output:
                                histogram:
        
                        coverage:
                            method: bedtools-genomecov
                            inputs:
                                input: 
                                    source: dedup/markDups_output
                                    format: "http://edamontology.org/format_2572" # <- Forces CWL directives during translation 
                                genomecoverageout: one.basename
                            outputs:
                                genomecoverage:
         
                         # Summarize genomecov output
                         summarize-genomecov:
                            method: awk
                            inputs:
                                infile: coverage/genomecoverage
                                program:
                                    type: string
                                    value: '{total += $3; count +=1; sumsq += $3*$3}; END {print "mean cov is", total / count, ". Var of cov is", (sumsq - total^2/count)/(count-1)}'
                                outputFileName: one.basename
                            outputs:
                                output:
        
                        # bedtools intersect genic
                        intersect-genic:
                            method: bedtools-intersect
                            inputs:
                                inputA:
                                    source: dedup/markDups_output
                                    format: "http://edamontology.org/format_2572" # <- Forces CWL directives during translation 
                                inputB: gff
                                intersectout: one.basename
                            outputs:
                                intersect:
        
                         # Inspect coverage of genic intersection
                         coverage-genic:
                            method: bedtools-genomecov
                            inputs:
                                input:
                                    source: intersect-genic/intersect
                                    format: "http://edamontology.org/format_2572" # <- Forces CWL directives during translation 
                                genomecoverageout: one.basename
                            outputs:
                                genomecoverage:
                
        
                        # Summarize coverage output
                        summarize-genic-genomecov:
                            method: awk
                            inputs:
                                inFile: coverage-genic/genomecoverage
                                program:
                                    type: string
                                    value: '{total += $3; count +=1}; END {print "total of all reads at genic bases", total, ", mean cov is", total / 13979861}'
                
                                outputFileName: one.basename
                            outputs:
                                output:
                
                        # Looking at bams in IGV is memory-hungry, and could be replaced by using tdf-format
                        # coverage files. 3D7-merge-B3_S1-C5_S2.bam done at command line.
                        # Default window size is 25bp
        
                        igvtools:
                            method: igvtools-count
                            inputs:
                                inputFile: dedup/markDups_output
                                outputFileName: one.basename
                                gnome: reference
                            outputs:
                                output:
    
        # Parent Merge
        merge-parents:
            method: samtools-merge
            inputs:
                input: process[iter2]/dedup/markDups_output
                outputFile: 3D7-merge-B2_S1-F4_S4.bam
            outputs:
                merge:

        # GRIDSS
        scatter:
            use: [ process[iter2]/dedup/markDups_output ]
            provide: [ main-input ]
            
            gridss:
                cwl-tool: gridss-callvariants
                inputs:
                    input: main-input #<- Implicit type promotion form single item to array
                    input2: merge-parents/merge
                    input-label:  main-input.basename #<- Implicit type promotion form single item to array
                    input-label2: merge-parents/merge.basename #<- Implicit type promotion form single item to array
                    output: main-input.basename #<- The method adds "'.gridss.assembly.vcf"
                    assembly: main-input.basename #<- The method adds ".gridss.assembly.bam"
                    reference_sequence: reference
                    blacklist: blacklist
                
                outputs:
                    vcf:
                    bam:
                    vcf_working:
                    bam_working:
                
            




            
    

        
        
        
        
        

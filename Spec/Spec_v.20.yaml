

################################################################################

 workflow:

    child_read_1 : 
        type : file[]
        location: ../data/
        pattern: "S?_R1.fastq.gz"

    child_read_2 : 
        type : file[]
        location: ../data/
        pattern: "S?_R2.fastq.gz"
        
    parent_read_1 : 
        type : file[]
        location: ../data/
        pattern: "P?_R1.fastq.gz"

    parent_read_2 : 
        type : file[]
        location: ../data/
        pattern: "S?_R2.fastq.gz"

    alignment:
        type: file
        location: /path/to/3D7-merge-B3_S1-C5_S2.bam

    gff:
        type: file
        location: /path/to/PlasmoDB-29_Pfalciparum3D7.gff        

    blacklist:
        type: file
        location: /path/to/CentromereTelomereRegions.bed

    reference:
        type: file
        location: /path/to/PlasmoDB-29_Pfalciparum3D7_Genome.fasta
        sidecar:
            - PlasmoDB-29_Pfalciparum3D7_Genome.fasta.amb
            - PlasmoDB-29_Pfalciparum3D7_Genome.fasta.ann
            - PlasmoDB-29_Pfalciparum3D7_Genome.fasta.bwt
            - PlasmoDB-29_Pfalciparum3D7_Genome.fasta.fai
            - PlasmoDB-29_Pfalciparum3D7_Genome.fasta.pac
            - PlasmoDB-29_Pfalciparum3D7_Genome.fasta.sa
        
    # Quality inspection of raw data
    fastqc:
        cwl-tool: fastqc
        inputs:
            fastq: child_read_1 + child_read_2 + parent_read_1 + parent_read_2
            outdir: "."
        outputs:
            zippedFile:  #<------------- Implicit mapping to CWL tool outputs
            report:

                   
    # 
    process:
        repeat:
            for: 
                iter1: [ child_read_1, child_read_2]
                iter2: [ parent_read_1, parent_read_2 ]
            mapto: [ read1, read2 ]
            do:
                scatter:
                    use: [ read_1, read_2 ]
                    method: dotproduct
                    provide: [ one, two ]
                    
                    # Alignment to ref v29 with bowtie2
                    align:
                        cwl-tool: bowtie2
                        inputs:
                            #implicit input one by scatter
                            #implicit input two by scatter
                            samout:
                                type: string
                                value : $(one.basename) + ".sam"
                            threads:
                                type : int
                                value : 8
                            sensitive-local:
                                type : boolean
                                value: true
                            bt2-idx:
                                type : string
                                value : $(reference.indexname)
                        outputs:
                            aligned-file:
        
                    # convert to bam
                    convert:
                        cwl-tool: samtools-view
                        inputs:
                            input: aligned/aligned-file
                            output-name:
                                type: string
                                value: $(one.basename) + ".bam"
                            threads:
                                type : int
                                value : 8
                        outputs:
                            output:
        
                    # sort and compress
                    sort:
                        cwl-tool: samtools-sort
                        inputs:
                            input: convert/output
                            output-name:
                                type: string
                                value: $(one.basename) + ".sorted.bam"
                            threads:
                                type : int
                                value : 8
                        outputs:
                            sorted:
        
                    # index bam    
                    index:
                        cwl-tool: samtools-index
                        inputs:
                            input: sort/sorted
                        #implicit output
        
                    # Remove duplicate reads
                    dedup:
                        cwl-tool: picar-markduplicates
                        inputs:
                            inputFileName_markDups: sort/sorted
                            outputFileName_markDups:
                                type: string
                                value: $(one.basename) + "_nodup.bam"
                            metricsFile:
                                type: string
                                value: $(one.basename) + "_duplic.metrics"
                            removeDuplicates: true
                        outputs:
                            markDups_output:
                            markDups_metrics:
        
                    # index duplicates
                    index-dedup:
                        cwl-tool: samtools-index
                        inoputs:
                            input: dedup/markDups_output
                        outputs:
                            index:
        
                    # Collect insert-size, aka fragment-size, statistics
                    insert-metrics:
                        cwl-tool: picard-CollectInsertSizeMetrics
                        inputs:
                            input: dedup/markDups_output
                            output:
                                type: string
                                value: $(one.basename) + ".insert-metrics.txt"
                            histogram_file:
                                type: string
                                value: $(one.basename) + ".insert-metrics.pdf"
                            removeDuplicates: true
                        outputs:
                            output:
                            histogram:
        
                    # Inspect coverage and gene bias:-
                    # bedtools genomecov -d -split -ibam 225-${fn}_nodup.bam
                    coverage:
                        cwl-tool: bedtools-genomecov
                        inputs:
                            input:
                                source: dedup/markDups_output
                                value: 
                                    ${
                                      self.format = "http://edamontology.org/format_2572";
                                      return self;
                                    }
                            depth:
                                type : 'enum'
                                value: '-d' #enum value form input specification of the CWL tool
                
                            genomecoverageout:
                                type: string
                                value: $(one.basename) + ".genomecov.out"
                
                            split: true
                
                        outputs:
                            genomecoverage:
         
                     # Summarize genomecov output
                    summarize-genomecov:
                        cwl-tool: awk
                        inputs:
                            infile: coverage/genomecoverage
                            program:
                                type: string
                                value: $( '{total += $3; count +=1; sumsq += $3*$3}; END {print "mean cov is", total / count, ". Var of cov is", (sumsq - total^2/count)/(count-1)}' ) 
                            outputFileName:
                                type : string
                                value: $(one.basename) + ".genomecov.summary.txt"
                        outputs:
                            output:
        
                    # bedtools intersect genic
                    intersect-genic:
                        cwl-tool: bedtools-intersect
                        inputs:
                            inputA:
                                source: dedup/markDups_output
                                value:
                                    ${
                                      self.format = "http://edamontology.org/format_2572";
                                      return self;
                                    }
                            inputB: gff
                            split: true
                            intersectout:
                                type: string
                                value: $(one.basename) + ".intersect.nongenic.bam"
                        outputs:
                            intersect:
        
                     # Inspect coverage of genic intersection
                    coverage-genic:
                        cwl-tool: bedtools-genomecov
                        inputs:
                            input:
                                source: intersect-genic/intersect
                                value:
                                    ${
                                        self.format = "http://edamontology.org/format_2572";
                                        return self;
                                    }
                            genomecoverageout:
                                type : string
                                value: $(one.basename) + ".genic.genomecov.out"
                
                    
                            depth:
                                type : 'enum'
                                value: '-d' #enum value form input specification of the CWL tool
                    
                            split: true
                
                        outputs:
                            genomecoverage:
                
        
                    # Summarize coverage output
                    summarize-genic-genomecov:
                        cwl-tool: awk
                        inputs:
                            inFile: coverage-genic/genomecoverage
                            program:
                                type: string
                                value: $( '{total += $3; count +=1}; END {print "total of all reads at genic bases", total, ", mean cov is", total / 13979861}' )
                
                            outputFileName:
                                type : string
                                value: $(one.basename) + ".genic.genomecov.summary.txt"
                        outputs:
                            output:
                
                    # Looking at bams in IGV is memory-hungry, and could be replaced by using tdf-format
                    # coverage files. 3D7-merge-B3_S1-C5_S2.bam done at command line.
                    # Default window size is 25bp
        
                    igvtools:
                        cwl-tool: igvtools-count
            
                        inputs:
                            inputFile: dedup/markDups_output
                            outputFileName:
                                type : string
                                value: $(one.basename) + ".tdf"
                            gnome: reference
                
                        outputs:
                            output:
    
    
    # Parent Merge
    merge-parents:
        cwl-tool: samtools-merge
        inputs:
            input: process[iter2]/dedup/markDups_output
            outputFile:
                value: $('3D7-merge-B2_S1-F4_S4.bam')
        outputs:
            merge:

    # GRIDSS
    scatter:
        use: [ process[iter2]/dedup/markDups_output ]
        provide: [ main-input ]
        gridss:
            cwl-tool: gridss-callvariants
            inputs:
                input:
                    source: main-input
                    value:
                        ${
                            if ( self == null ) {
                                return null;
                            } else {
                                return [self];
                            }
                        }
                input2:
                    source: merge-parents/merge
                    value:
                        ${
                            if ( self == null ) {
                                return null;
                            } else {
                                return [self];
                            }
                        }
                
                input-label:
                    type : array
                    element : string
                    source : main-input
                    value: 
                        ${
                            return [self.nameroot];
                        }
                input-label2:
                    type : array
                    element : string
                    source : merge-parents/merge
                    value: 
                        ${
                            return [self.nameroot];
                        }
                output:
                    source: main-input
                    value:
                        ${
                            return self.nameroot + '.gridss.assembly.vcf'
                        }
                assembly:
                    source: main-input
                    value:
                        ${
                            return self.nameroot + '.gridss.assembly.bam'
                        }
                reference_sequence: reference
                blacklist: blacklist
                
            
            
                #Implicit maininput
                parent-merge: merge-parents/merge
                #Implicit reference
                #Implicit blacklist
                
            outputs:
                vcf:
                bam:
                vcf_working:
                bam_working:
                
            

####################################################################
####################################################################
####################################################################


 workflow:

    reads_1 : 
        type : file[]
        location: ../data/
        pattern: "S?_R1.fastq.gz"

    reads_2 : 
        type : file[]
        location: ../data/
        pattern: "S?_R2.fastq.gz"

    adapters:
        type: file
        location: /path/to/TruSeq3-PE.fa
        
    scatter:
        use: [ reads_1, reads_2 ]
        method: dotproduct
        provide: [ read_1, read_2 ]
        
        # trim with trimmomatic
        trim:
            cwl-tool: trimmomatic
            requirements:
                ResourceRequirement:
                    coresMin: 2
                    ramMin: 16000
            inputs:
                reads1:
                    source: read_1
                    value:
                        ${
                            self.format = "http://edamontology.org/format_1930";
                            return self;
                        }
                reads2:
                    source: read_2
                    value:
                        ${
                            self.format = "http://edamontology.org/format_1930";
                            return self;
                        }
                illuminaClip:
                    source: adapters
                    value:
                    ${
                        return {
                            "adapters": self,
                            "seedMismatches": 1,
                            "palindromeClipThreshold": 20,
                            "simpleClipThreshold": 20,
                            "minAdapterLength": 4,
                            "keepBothReads": true 
                        };
                    }
                
            outputs:
                output_log:
                reads1_trimmed:
                reads1_trimmed_unpaired:
                reads2_trimmed_paired:
                reads2_trimmed_unpaired:
        
        
        # rename trimmed files by removing redundant '.fastq' from the filename
        rename_reads1_trimmed:
            cwl-tool: rename-file
            requirements:
                ResourceRequirement:
                    coresMin: 1
                    ramMin: 4000
            inputs:
                infile: trim/reads1_trimmed
                outfile:
                    source: trim/reads1_trimmed
                    value: 
                        ${ return rename_trim_file(); }
            outputs:
                renamed:
        
        # align to mouse reference with bowtie2
         align-to-mouse:
            cwl-tool: bowtie2
            inputs:
                samout:
                    source: rename_reads1_trimmed/renamed
                    valueFrom: ${ return self.nameroot + '.mouse.sam'; }
                threads:
                    VALUE: 27
                one:
                    source: trim/reads1_trimmed
                    value:
                        ${
                            return [self];
                        }
                two:
                    source: rename_reads2_trimmed_paired/renamed
                    value:
                        ${
                            if ( self == null ) {
                                return null;
                            } else {
                                return [self];
                            }
                        }
                unpaired:
                    source: trim/reads1_trimmed_unpaired
                    value:
                        ${
                            if ( self == null ) {
                                return null;
                            } else {
                                return [self];
                            }
                        }
                bt2-idx:
                    default: /stornext/HPCScratch/PapenfussLab/reference_genomes/bowtie2/GRCm38
                local: true
                reorder: true
                
            outputs:
                aligned-file:
        
        # align to human reference with bowtie2
        align-to-human:
            cwl-tool: bowtie2
            inputs:
                samout:
                    source: rename_reads1_trimmed/renamed
                    value:
                        ${
                              return self.nameroot + '.human.sam'
                        }
              threads: 25
              one:
                source: rename_reads1_trimmed/renamed
                value:
                    ${
                        return [self];
                    }
              two:
                source: rename_reads2_trimmed_paired/renamed
                value:
                    ${
                        if ( self == null ) {
                            return null;
                        } else {
                            return [self];
                        }
                    }
                unpaired:
                    source: trim/reads1_trimmed_unpaired
                    value:
                        ${
                            if ( self == null ) {
                                return null;
                            } else {
                                return [self];
                            }
                        }
                bt2-idx:
                    default: /wehisan/bioinf/bioinf-data/Papenfuss_lab/projects/reference_genomes/human_new/no_alt/hg38_no_alt.fa
                local: true
                reorder: true
            out:
                aligned-file:
        
        
        # convert human
        convert-human:
            cwl-tool: samtools-view
            inputs:
                input: align-to-human/aligned-file
                output_name:
                    source: rename_reads1_trimmed/renamed
                    value:
                        ${
                            return self.nameroot + '.human.bam'
                        }
                threads: 10
            out:
                output:
                
        # sort and compress human
        sort-human:
            cwl-tool: samtools-sort
            inputs:
                input: convert-human/output
                output_name:
                    source: rename_reads1_trimmed/renamed
                    value:
                        ${
                              return self.nameroot + '.sorted.human.bam'
                        }
                threads: 10
            outputs: 
                sorted:

        # index human bam
        index-human:
            cwl-tool: samtools-index
            inputs: sort-human/sorted
            outputs:
                out:
                
        # GRIDSS that human
        gridss-human:
            cwl-tool: gridss-callvariants
            inputs:
                input:
                    source: sort-human/sorted
                    value:
                        ${
                            if ( self == null ) {
                                return null;
                            } else {
                                return [self];
                            }
                        }
                REFERENCE_SEQUENCE: /wehisan/bioinf/bioinf-data/Papenfuss_lab/projects/reference_genomes/human_new/no_alt/hg38_no_alt.fa
                OUTPUT:
                    source: sort-human/sorted
                    value:
                        ${
                            return self.nameroot + '.gridss.vcf'
                        }
                ASSEMBLY:
                    source: sort-human/sorted
                    value:
                        ${
                            return self.nameroot + '.gridss.bam'
                        }
                out:
                    vcf:
                    bam:
                    vcf_working:
                    bam_working:
        
        # Compress and index vcf output
        gridss-bgzip:
            cwl-tool: bgzip
            inputs:
                inputFile: gridss-human/vcf
            outputs:
                bgzip:
        
        gridss-tabix:
            cwl-tool: tabix
            inputs:
                inputFile: gridss-bgzip/bgzip
                preset:
                    value: 'vcf'
            outputs:
                tabix:

        # xenomapper
        xenomapping:
            cwl-tool: xenomapper
            inputs:
                primary_sam: align-to-human/aligned-file
                secondary_sam: align-to-mouse/aligned-file
                primary_specific_fn:
                    source: rename_reads1_trimmed/renamed
                    value: $(self.basename) + ".human_specific.sam"
                secondary_specific_fn:
                    source: rename_reads1_trimmed/renamed
                    value: $(self.basename) + ".mouse_specific.sam"
                primary_multi_fn:
                    source: rename_reads1_trimmed/renamed
                    value: $(self.basename) + ".human_multi.sam"
                secondary_multi_fn:
                    source: rename_reads1_trimmed/renamed
                    value: $(self.basename) + ".mouse_multi.sam"
                unassigned_fn:
                    source: rename_reads1_trimmed/renamed
                    value: $(self.basename) + ".unassigned.sam"
                unresolved_fn:
                    source: rename_reads1_trimmed/renamed
                    value: $(self.basename) + ".unresolved.sam"
            output:
                primary_specific:
                secondary_specific:
                primary_multi:
                secondary_multi:
                unassigned:
                unresolved:
                
        # Call with platypus
        platypus:
            cwl-tool: platypus
            inputs:
                bamFiles:
                    source: index-human/index
                    valueFrom:
                        ${
                            if ( self == null ) {
                                return null;
                            } else {
                                return [self];
                            }
                        }
                refFile: /wehisan/bioinf/bioinf-data/Papenfuss_lab/projects/reference_genomes/human_new/no_alt/hg38_no_alt.fa
                outputFileName:
                    source: sort-human/sorted
                    value: $(self.basename) + ".platypus.vcf"
                verbosity: 0
            outputs:
                output:
            
        #Compress and index vcf output
        platypus-bgzip:
            cwl-tool: bgzip
            inputs:
                inputFile: platypus/output
            outputs:
                bgzip:
        
        platypus-tabix:
            cwl-tool: tabix
            inputs:
                inputFile: platypus-bgzip/bgzip
                preset: 'vcf'
            outputs:
                tabix






            
    

        
        
        
        
        

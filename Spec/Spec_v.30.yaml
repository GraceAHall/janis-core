

################################################################################

 workflow:

    child_read_1 : 
        type : SequenceReadArchive
        paired: true
        name-prefix: "CH_R1"  #<--- This can encapsulate: CH_R1_FRWRD_FASTQ.GZ and CH_R1_BKWRD_FASTQ.GZ
        location: ../data/

    child_read_2 : 
        type : SequenceReadArchive
        paired: true
        name-prefix: "CH_R2"  #<--- This can encapsulate: CH_R2_FRWRD_FASTQ.GZ and CH_R2_BKWRD_FASTQ.GZ
        location: ../data/
        
    parent_read_1 : 
        type : SequenceReadArchive
        paired: true
        name-prefix: "PR_R1"  

    parent_read_2 : 
        type : SequenceReadArchive
        paired: true
        name-prefix: "PR_R2"  

    reference:
        type: RefGenome
        location: /path/to/
        name: PlasmoDB-29_Pfalciparum3D7_Genome

    gff:
        type: GenFeatureFormat
        name: PlasmoDB-29_Pfalciparum3D7
        location: /path/to/

    blacklist:
        type: file
        location: /path/to/CentromereTelomereRegions.bed

    # Quality inspection of raw data
    fastqc:
        # Implicit mapping to cwl-tool: fastqc
        inputs:
            fastq: child_read_1 + child_read_2 + parent_read_1 + parent_read_2
            outdir: "."
        outputs:
            zippedFile:  #<------------- Implicit mapping to CWL tool outputs
            report:

                   
    # 
    process:
        repeat:
            for: 
                iter1: [ child_read_1, child_read_2]
                iter2: [ parent_read_1, parent_read_2 ]
            mapto: [ read1, read2 ]
            do:
                scatter:
                    use: [ read_1, read_2 ]
                    method: dotproduct
                    provide: [ one, two ]
                    
                    # Alignment to ref v29 with bowtie2
                    align-bowtie2:
                        inputs:
                            #implicit input one and two by scatter
                            samout: one.basename + ".sam" #<------ This will require "synthesizing code into CWL"
                            threads: 8
                            sensitive-local: true
                            bt2-idx: reference.index #<------- Index file of the ref geneome dataset
                        outputs:
                            aligned-file:
        
                    # convert to bam
                    convert-samtools-view:
                        inputs:
                            input: aligned/aligned-file
                            output-name: one.basename + ".bam"
                            threads: 8
                        outputs:
                            output:
        
                    # sort and compress
                    sort-samtools-sort:
                        inputs:
                            input: convert/output
                            output-name: one.basename + ".sorted.bam"
                            threads: 8
                        outputs:
                            sorted:
        
                    # index bam    
                    index-samtools-index:
                        inputs:
                            input: sort/sorted
                        outputs:
                            index:
        
                    # Remove duplicate reads
                    dedup-picar-markduplicates:
                        inputs:
                            inputFileName_markDups: sort/sorted
                            outputFileName_markDups: one.basename + "_nodup.bam"
                            metricsFile: one.basename + "_duplic.metrics"
                            removeDuplicates: true
                        outputs:
                            markDups_output:
                            markDups_metrics:
        
                    # index duplicates
                    index-dedup-samtools-index:
                        inoputs:
                            input: dedup/markDups_output
                        outputs:
                            index:
        
                    # Collect insert-size, aka fragment-size, statistics
                    insert-metrics-picard-CollectInsertSizeMetrics:
                        inputs:
                            input: dedup/markDups_output
                            output: one.basename + ".insert-metrics.txt"
                            histogram_file: one.basename + ".insert-metrics.pdf"
                            removeDuplicates: true
                        outputs:
                            output:
                            histogram:
        
                    # Inspect coverage and gene bias:-
                    # bedtools genomecov -d -split -ibam 225-${fn}_nodup.bam
                    coverage-bedtools-genomecov:
                        inputs:
                            input:
                                source: dedup/markDups_output
                                value: 
                                    ${
                                      self.format = "http://edamontology.org/format_2572";
                                      return self;
                                    }
                            depth: '-d'
                            genomecoverageout: one.basename + ".genomecov.out"
                            split: true
                        outputs:
                            genomecoverage:
         
                     # Summarize genomecov output
                     summarize-genomecov-awk:
                        inputs:
                            infile: coverage/genomecoverage
                            program:
                                type: string
                                value: $( '{total += $3; count +=1; sumsq += $3*$3}; END {print "mean cov is", total / count, ". Var of cov is", (sumsq - total^2/count)/(count-1)}' ) 
                            outputFileName: one.basename + ".genomecov.summary.txt"
                        outputs:
                            output:
        
                    # bedtools intersect genic
                    intersect-genic-bedtools-intersect:
                        inputs:
                            inputA:
                                source: dedup/markDups_output
                                value:
                                    ${
                                      self.format = "http://edamontology.org/format_2572";
                                      return self;
                                    }
                            inputB: gff
                            split: true
                            intersectout: one.basename + ".intersect.nongenic.bam"
                        outputs:
                            intersect:
        
                     # Inspect coverage of genic intersection
                     coverage-genic-bedtools-genomecov:
                        inputs:
                            input:
                                source: intersect-genic/intersect
                                value:
                                    ${
                                        self.format = "http://edamontology.org/format_2572";
                                        return self;
                                    }
                            genomecoverageout: one.basename + ".genic.genomecov.out"
                            depth: '-d'
                            split: true
                        outputs:
                            genomecoverage:
                
        
                    # Summarize coverage output
                    summarize-genic-genomecov-awk:
                        inputs:
                            inFile: coverage-genic/genomecoverage
                            program:
                                type: string
                                value: $( '{total += $3; count +=1}; END {print "total of all reads at genic bases", total, ", mean cov is", total / 13979861}' )
                
                            outputFileName: one.basename + ".genic.genomecov.summary.txt"
                        outputs:
                            output:
                
                    # Looking at bams in IGV is memory-hungry, and could be replaced by using tdf-format
                    # coverage files. 3D7-merge-B3_S1-C5_S2.bam done at command line.
                    # Default window size is 25bp
        
                    igvtools-igvtools-count:
                        inputs:
                            inputFile: dedup/markDups_output
                            outputFileName: one.basename + ".tdf"
                            gnome: reference
                        outputs:
                            output:
    
    # Parent Merge
    merge-parents-samtools-merge:
        inputs:
            input: process[iter2]/dedup/markDups_output
            outputFile:
                value: $('3D7-merge-B2_S1-F4_S4.bam')
        outputs:
            merge:

    # GRIDSS
    scatter:
        use: [ process[iter2]/dedup/markDups_output ]
        provide: [ main-input ]
            
        gridss:
            cwl-tool: gridss-callvariants
            inputs:
                input:
                    source: main-input
                    value:
                        ${
                            if ( self == null ) {
                                return null;
                            } else {
                                return [self];
                            }
                        }
                input2:
                    source: merge-parents/merge
                    value:
                        ${
                            if ( self == null ) {
                                return null;
                            } else {
                                return [self];
                            }
                        }
                
                input-label:
                    type : array
                    element : string
                    source : main-input
                    value: 
                        ${
                            return [self.nameroot];
                        }
                input-label2:
                    type : array
                    element : string
                    source : merge-parents/merge
                    value: 
                        ${
                            return [self.nameroot];
                        }
                output:
                    source: main-input
                    value:
                        ${
                            return self.nameroot + '.gridss.assembly.vcf'
                        }
                assembly:
                    source: main-input
                    value:
                        ${
                            return self.nameroot + '.gridss.assembly.bam'
                        }
                reference_sequence: reference
                blacklist: blacklist
                
            
            
                #Implicit maininput
                parent-merge: merge-parents/merge
                #Implicit reference
                #Implicit blacklist
                
            outputs:
                vcf:
                bam:
                vcf_working:
                bam_working:
                
            

####################################################################
####################################################################
####################################################################





            
    

        
        
        
        
        


workflow:
	zip:
	    input:
	        "a.txt" : "file"
	        "path" : "......."
	    output:
	        "b.zip" : "file"
	        
	        
####################################################################


workflow:
	convert-doc:
	    input:
	        "a.word" : "file"
	    output:
	        "b.pages" : "file"
	zip:
	    input:
	        "b.pages" : "file"
	    output:
	        "b.pages.zip" : "file"

Note: 

1. Order of the steps to link input / output
2. Output can be input to any step further down



####################################################################


workflow:
	sort:
	    input:
	        "names" : "array"
	        "element-type" : "string"
	        "value" : ["X", "A", "C", "B" ]
	    output:
	        "sorted.list" : "array"
	        "element-type" : "string"
	searilize:
	    inputs:
	        "sorted.list" : "array"
	    outputs:
	        "list.txt" : "file"
	        
	        

####################################################################

workflow:
	sort:
	    input:
	        "names" : "array"
	        "value" : ["X", "A", "C", "B" ]
	searilize:
	    output:
	        "list.txt" : "file"
	        

Note:

    1. Implicit I/O linking
    2. Step definition defines supported type and defult type. If type is omitted defult type is assumed.
    

####################################################################

workflow:
	sort:
	    input:
	        "value" : ["X", "A", "C", "B" ]
	searilize:
	    output:
	        "list.txt" : "file"
	        

Note:
    1. Can we parse only "value" and then find the best fit input



####################################################################

workflow:
	zip:
	    input:
	        "images" : "array" 
	        "element-type" : "file"
	        "value" : ["a.txt", "b.txt", "C.txt", "d.txt" ]
	    output:
	        "my.zip" : "file"
	upload-2-ftp:
	    input:
	        "my.zip" : "file"
	    input:
	        "ftp://user:pass@ftp.com" : "ftpserver"
	    outputs:
	        "success" : "boolean"
	        

Note:
    1. File array / set as input
    2. Custom type "ftpserver"

####################################################################

workflow:
	zip:
	    input:
	        "images" : "array" 
	        "element-type" : "file"
	        "value" : ["a.txt", "b.txt", "C.txt", "d.txt" ]
	    output:
	        "my.zip" : "file"
	upload-2-s3:
	    input:
	        "my.zip" : "file"
	    input:
	        "dest" : "s3bucket"
	        "access-key" : "DDKLDSKLDSJKLDJK"
	    outputs:
	        "success" : "boolean"
	        

Note:
    1.Custiom type s3bucket
    
    
    
####################################################################

workflow:
	zip:
	    input:
	        "images" : "array" 
	        "value" : ["a.txt", "b.txt", "C.txt", "d.txt" ]
	upload-2-s3:
	    input:
	        zip:
	    input:
	        "dest" : "s3bucket"
	    outputs:
	        "success" : "boolean"
	        

Note:
    1. Outputs from "zip" step that matches input of "upload" are used 
    2. What happens of multiple output matches one input?
    
    3. Should the upload is con
    
    
    
####################################################################

File(s) by pattern matching / filter


workflow:
	maleria:
	    input:
	        "aset" : "array"
	        "element-type" : "file"
	        "location" : "../files"
	        "pattern" : ["a?b.tx", "cc*.q"]
	    input:
	        "anotherset" : "array"
	        "element-type" : "file"
	        "pattern" : [ 
	            { "location" : "path1", "value" : "a?b.tx"}, 
	            { "location" : "path1", "value" : "cc*.q" }
	        ]

####################################################################

workflow:
	maleria:
	    input:
	        "read1" : "file"
	        "location" : "../data/S1_R1.fastq.gz"
	        "format" : "edam:format_1930"
	    input:
	        "alignment" : "file"
	        "location" : "http://depot/3D7-merge-B3_S1-C5_S2.bam"
	        "format" : "edm:data_1384"
	    input:
	        "referrence" : "file"
	        "location" : "../mydata/PlasmoDB-29_Pfalciparum3D7_Genome.fasta"
	        
	        
####################################################################

Custom types

workflow:
	maleria:
	    input:
	        "read1" : "read"
	        "prefix" : "child"
	        "location" : "../mydata/"
	    input:
	        "alignment1" : "alignment"
	        "prefix" : "3D7-merge-B3_S1-C5_S2" 
	    input:
	        "ref1" : "reference"
	        "prefix" : "PlasmoDB-29_Pfalciparum3D7_Genome"
	        "location" : "../mydata/"
	        
	        
	        
####################################################################

Custom type with implicit prefix

workflow:
	maleria:
	    input:
	        "child_read_1" : "read"
	        "location" : "../mydata/"
	    input:
	        "child_read_2" : "read"
	        "location" : "../mydata/"
	    input:
	        "3D7-merge-B3_S1-C5_S2" : "alignment"
	        "location" : "../mydata/"
	    input:
	        "PlasmoDB-29_Pfalciparum3D7_Genome" : "reference"
	        "location" : "../mydata/"
	    input:
	        "PlasmoDB-29_Pfalciparum3D7" : "gff"
	        "location" : "../mydata/"

    
####################################################################

Custom type with implicit prefix

workflow:
	maleria:
	    input:
	        -   "child_read_1" : "read"
	            "location" : "../mydata/"

	        -   "child_read_2" : "read"
	            "location" : "../mydata/"
	            
	        -   "3D7-merge-B3_S1-C5_S2" : "alignment"
	            "location" : "../mydata/"
	            
	        -   "PlasmoDB-29_Pfalciparum3D7_Genome" : "reference"
	            "location" : "../mydata/"
	            
	        -   "PlasmoDB-29_Pfalciparum3D7" : "gff"
	            "location" : "../mydata/"


####################################################################


Same example different naming

workflow:
	falciparum:
	    input:
	        "child1" : "fastq"
	        "location" : "../mydata/"
	    input:
	        "3D7-merge-B3_S1-C5_S2.bam" : "bam"
	        "loication" : "http://depot/"
	    input:
	        "PlasmoDB-29_Pfalciparum3D7_Genome" : "fasta"
	        "location" : "../mydata/"
	    input:
	        "PlasmoDB-29_Pfalciparum3D7_Genome" : "gff"
	        "location" : "../mydata/"
	        
	        
####################################################################

Custom type with implicit pattern matching or filter

workflow:
	maleria:
	    input:
	        -   "child_read_1" : "read"
	            "location" : "../mydata/"
	            "pattern" : ["a?b.tx", "cc*.q"]

	        -   "child_read_2" : "read"
	            "location" : "../mydata/"
	            "pattern" : [ 
	                { "location" : "path1", "value" : "a?b.tx"}, 
    	            { "location" : "path1", "value" : "cc*.q" }
	            ]
	            

####################################################################

Sidecar files

workflow:
	maleria:
	    input:
	        -   "child_read_1" : "array"
	            "element-type" : "file"
	            "location" : "../data/S1_R1.fastq.gz"
	            "sidecar" : 
	                -   "ab.txt"
	                -   "cc.q"

	        -   "child_read_2" : "file"
	            "location" : "../data/S1_R1.fastq.gz"
	            "sidecar" :
	                -   "location" : "path"
	                    "pattern" : "a?b.txt"
	                    
	                -   "location" : "path"
	                    "pattern" : "XX?.txt"
	            
	            


####################################################################


Inputs defined intoseparate YAML


workflow:
	maleria:
	    input:
	        "child_read_1" :
	        "child_read_2" :
	        "3D7-merge-B3_S1-C5_S2" :
	        "PlasmoDB-29_Pfalciparum3D7_Genome" :
	        "PlasmoDB-29_Pfalciparum3D7" :


YAML:


 - "child_read_1": "array"
   "element-type" : "file"
   "location" : "../data/S1_R1.fastq.gz"
   "sidecar" : 
        -   "ab.txt"
        -   "cc.q"


####################################################################


Referrencing output from other step as input

workflow:
	maleria:
	    input:
	        "stepX/output1" : "ref"  <-    path : type



########################### Output #########################################

Outputs are files in the output dir

workflow:
	maleria:
	    output:
	        "out1" : "file"
	        "name" : "output.txt"
	        "binding" : "file/in/outputdir"
	    output:
	        "out2" : "array"
	        "element-type" : "file"
	        "ref" : "step-name/output-name"
	        
	        
########################### Output #########################################

Referrencing shorthand

workflow:
	maleria:
	    output:
	        "stepX/output-name":












NOTE: 

Any input / output element without any further meta is considered ref























####################################################################


1. Usage of ExpressionLib - Embedded Js Code

https://github.com/WEHI-ResearchComputing/resistant-falciparum/blob/master/src/rf-pl.cwl



2. Synthesize input (named output_name ) based on another input (read1)

output_name:
        source: read1
        valueFrom: >
          ${
              var fn = self.nameroot;
              fn = fn.substring(0,fn.length-9);
              return fn + '.bam'
          }




XXXXXX: Online YAML validator + JSON translation

http://yaml-online-parser.appspot.com/




